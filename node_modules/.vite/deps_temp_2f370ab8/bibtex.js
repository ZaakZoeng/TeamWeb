import {
  __commonJS
} from "./chunk-76J2PTFD.js";

// node_modules/bibtex/index.js
var require_bibtex = __commonJS({
  "node_modules/bibtex/index.js"(exports, module) {
    !function(e, t) {
      if ("object" == typeof exports && "object" == typeof module)
        module.exports = t();
      else if ("function" == typeof define && define.amd)
        define([], t);
      else {
        var n = t();
        for (var r in n)
          ("object" == typeof exports ? exports : e)[r] = n[r];
      }
    }(exports, function() {
      return function(e) {
        function t(r) {
          if (n[r])
            return n[r].exports;
          var s = n[r] = { i: r, l: false, exports: {} };
          return e[r].call(s.exports, s, s.exports, t), s.l = true, s.exports;
        }
        var n = {};
        return t.m = e, t.c = n, t.d = function(e2, n2, r) {
          t.o(e2, n2) || Object.defineProperty(e2, n2, { configurable: false, enumerable: true, get: r });
        }, t.n = function(e2) {
          var n2 = e2 && e2.__esModule ? function() {
            return e2.default;
          } : function() {
            return e2;
          };
          return t.d(n2, "a", n2), n2;
        }, t.o = function(e2, t2) {
          return Object.prototype.hasOwnProperty.call(e2, t2);
        }, t.p = "", t(t.s = 17);
      }([function(e, t, n) {
        "use strict";
        function r(e2, t2) {
          if ("string" != typeof e2)
            throw new Error("Expected to be string: " + JSON.stringify(t2 || e2));
          return e2;
        }
        function s(e2, t2) {
          if (void 0 === e2)
            throw new Error("Expected to be defined: " + JSON.stringify(t2 || e2));
          return e2;
        }
        function o(e2, t2) {
          if (!i(e2))
            throw new Error("Expected to be array: " + JSON.stringify(t2 || e2));
          return e2;
        }
        function i(e2) {
          return !!e2 && e2.constructor === Array;
        }
        function a(e2) {
          return "number" == typeof e2;
        }
        function u(e2) {
          return "string" == typeof e2;
        }
        Object.defineProperty(t, "__esModule", { value: true }), t.mustBeString = r, t.mustBeDefined = s, t.mustBeArray = o, t.isArray = i, t.isNumber = a, t.isString = u, t.flattenMyArray = function(e2, n2) {
          n2 || (n2 = []);
          for (var r2 = 0, s2 = e2.length; r2 < s2; r2++) {
            var o2 = e2[r2];
            if (Array.isArray(o2))
              for (var i2 = 0, a2 = o2.length; i2 < a2; i2++) {
                var u2 = o2[i2];
                Array.isArray(u2) ? t.flattenMyArray(u2, n2) : n2.push(u2);
              }
            else
              n2.push(o2);
          }
          return n2;
        };
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          return "quotedstringwrapper" === e2.type;
        }
        function s(e2) {
          return "quotedstring" === e2.type;
        }
        var o = this && this.__extends || function() {
          var e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t2) {
            e3.__proto__ = t2;
          } || function(e3, t2) {
            for (var n2 in t2)
              t2.hasOwnProperty(n2) && (e3[n2] = t2[n2]);
          };
          return function(t2, n2) {
            function r2() {
              this.constructor = t2;
            }
            e2(t2, n2), t2.prototype = null === n2 ? Object.create(n2) : (r2.prototype = n2.prototype, new r2());
          };
        }();
        Object.defineProperty(t, "__esModule", { value: true });
        var i = n(4), a = function(e2) {
          function t2(t3, n2) {
            return e2.call(this, "quotedstring", t3, n2) || this;
          }
          return o(t2, e2), t2;
        }(i.BibStringComponent);
        t.QuotedString = a;
        var u = function(e2) {
          function t2(t3) {
            return e2.call(this, "quotedstringwrapper", t3) || this;
          }
          return o(t2, e2), t2;
        }(i.BibOuterStringComponent);
        t.OuterQuotedString = u, t.isOuterQuotedString = r, t.isQuotedString = s;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          return "bracedstringwrapper" === e2.type;
        }
        function s(e2) {
          return "bracedstring" === e2.type;
        }
        var o = this && this.__extends || function() {
          var e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t2) {
            e3.__proto__ = t2;
          } || function(e3, t2) {
            for (var n2 in t2)
              t2.hasOwnProperty(n2) && (e3[n2] = t2[n2]);
          };
          return function(t2, n2) {
            function r2() {
              this.constructor = t2;
            }
            e2(t2, n2), t2.prototype = null === n2 ? Object.create(n2) : (r2.prototype = n2.prototype, new r2());
          };
        }();
        Object.defineProperty(t, "__esModule", { value: true });
        var i = n(4), a = function(e2) {
          function t2(t3, n2) {
            var r2 = e2.call(this, "bracedstring", t3, n2) || this;
            return r2.isSpecialCharacter = 0 === t3 && "\\" === n2[0], r2;
          }
          return o(t2, e2), t2;
        }(i.BibStringComponent);
        t.BracedString = a;
        var u = function(e2) {
          function t2(t3) {
            return e2.call(this, "bracedstringwrapper", t3) || this;
          }
          return o(t2, e2), t2;
        }(i.BibOuterStringComponent);
        t.OuterBracedString = u, t.isOuterBracedString = r, t.isBracedString = s;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          return "number" == typeof e2.braceDepth && "string" == typeof e2.type;
        }
        function s(e2) {
          return "ContiguousSimpleString" === e2.type && d.isArray(e2.data);
        }
        function o(e2) {
          return e2.data.join("");
        }
        function i(e2, t2) {
          if (d.isNumber(t2) || d.isString(t2))
            return t2;
          if (y.isStringRef(t2))
            return new y.StringRef(0, t2.stringref);
          switch (d.mustBeString(t2.type, t2)) {
            case "id":
            case "ws":
            case "number":
              return d.mustBeString(t2.string);
            case "bracedstring":
            case "braced":
              if (!d.isArray(t2.data))
                throw new Error("Expect array for data: " + JSON.stringify(t2));
              return new h.BracedString(e2, d.flattenMyArray(t2.data).map(function(t3) {
                return i(e2 + 1, t3);
              }));
            case "quotedstring":
              if (!d.isArray(t2.data))
                throw new Error("Expect array for data: " + JSON.stringify(t2));
              var n2 = d.flattenMyArray(t2.data);
              return new $.QuotedString(e2, n2.map(function(t3) {
                return i(e2, t3);
              }));
            default:
              throw new Error("Unexpected complex string type: " + t2.type);
          }
        }
        function a(e2) {
          if (d.isString(e2))
            return e2;
          if (d.isNumber(e2))
            return e2 + "";
          if (h.isBracedString(e2) || $.isQuotedString(e2) || $.isOuterQuotedString(e2) || h.isOuterBracedString(e2))
            return u(e2.data);
          throw new Error(JSON.stringify(e2));
        }
        function u(e2) {
          return e2.map(a).join("");
        }
        function c(e2, t2) {
          for (var n2 = [], r2 = 0, s2 = e2; r2 < s2.length; r2++) {
            var o2 = s2[r2], i2 = p(o2, t2);
            d.isArray(i2) ? n2 = n2.concat(i2) : n2.push(i2);
          }
          return n2;
        }
        function p(e2, t2) {
          if (h.isBracedString(e2))
            return e2;
          if ($.isQuotedString(e2)) {
            var n2 = c(e2.data, true);
            return d.isArray(n2) ? t2 ? n2 : _.concat(n2).concat(_) : t2 ? n2 : ['"', n2, '"'];
          }
          if ($.isOuterQuotedString(e2))
            return c(e2.data, true);
          if (h.isOuterBracedString(e2))
            return c(e2.data, false);
          if (d.isString(e2) || d.isNumber(e2))
            return e2;
          throw y.isStringRef(e2) ? new Error("StringRef should be resolved at this point!") : new Error();
        }
        function b(e2) {
          for (var t2 = [], n2 = 0, r2 = e2; n2 < r2.length; n2++) {
            var o2 = r2[n2];
            if (d.isString(o2) || d.isNumber(o2))
              if (t2.length <= 0) {
                var i2 = { type: "ContiguousSimpleString", data: [o2] };
                t2.push(i2);
              } else {
                var a2 = t2[t2.length - 1];
                if (s(a2))
                  a2.data.push(o2);
                else {
                  var i2 = { type: "ContiguousSimpleString", data: [o2] };
                  t2.push(i2);
                }
              }
            else
              t2.push(o2);
          }
          return t2;
        }
        function l(e2) {
          return m(e2, /\s+and\s+/g);
        }
        function f(e2, t2) {
          return void 0 === t2 && (t2 = 2), m(e2, /\s*,\s*/g, t2);
        }
        function m(e2, t2, n2) {
          for (var r2 = [], s2 = [], o2 = 0, i2 = e2; o2 < i2.length; o2++) {
            var a2 = i2[o2];
            if (d.isString(a2) && (void 0 === n2 || n2 > 0)) {
              var u2 = t2.exec(a2), c2 = 0;
              if (u2) {
                do {
                  var p2 = c2;
                  c2 = u2.index + u2[0].length, s2.push(a2.substring(p2, u2.index)), (void 0 === n2 || n2 > 0) && (r2.push(s2), s2 = [], void 0 !== n2 && n2 > 0 && n2--), u2 = void 0 === n2 || n2 > 0 ? t2.exec(a2) : void 0;
                } while (u2);
                c2 > 0 && c2 < a2.length && s2.push(a2.substring(c2));
              } else
                s2.push(a2);
            } else
              s2.push(a2);
          }
          return s2.length > 0 && r2.push(s2), r2;
        }
        Object.defineProperty(t, "__esModule", { value: true });
        var y = n(5), h = n(2), $ = n(1), d = n(0);
        t.isBibStringComponent = r, t.isContiguousSimpleString = s, t.joinContiguousSimpleStrings = o, t.parseStringComponent = i, t.toStringBibStringDatum = a, t.toStringBibStringData = u, t.flattenQuotedStrings = c;
        var _ = ['"'];
        t.globContiguousStrings = b, t.splitOnAnd = l, t.splitOnComma = f, t.splitOnPattern = m;
      }, function(e, t, n) {
        "use strict";
        var r = this && this.__extends || function() {
          var e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t2) {
            e3.__proto__ = t2;
          } || function(e3, t2) {
            for (var n2 in t2)
              t2.hasOwnProperty(n2) && (e3[n2] = t2[n2]);
          };
          return function(t2, n2) {
            function r2() {
              this.constructor = t2;
            }
            e2(t2, n2), t2.prototype = null === n2 ? Object.create(n2) : (r2.prototype = n2.prototype, new r2());
          };
        }();
        Object.defineProperty(t, "__esModule", { value: true });
        var s = n(0), o = function() {
          function e2(e3, t2, n2) {
            this.type = e3, this.braceDepth = t2, this.data = n2;
          }
          return e2.isBibStringComponent = function(e3) {
            return "number" == typeof e3.braceDepth && "string" == typeof e3.type;
          }, e2.stringifyDatum = function(t2) {
            if (s.isString(t2))
              return t2;
            if (s.isNumber(t2))
              return t2.toString();
            if (e2.isBibStringComponent(t2))
              return t2.stringify();
            throw new Error("Unexpected state");
          }, e2.prototype.stringify = function() {
            return this.data.map(e2.stringifyDatum).join("");
          }, e2;
        }();
        t.BibStringComponent = o;
        var i = function(e2) {
          function t2(t3, n2) {
            return e2.call(this, t3, 0, n2) || this;
          }
          return r(t2, e2), t2;
        }(o);
        t.BibOuterStringComponent = i;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          return "string" == typeof e2.stringref;
        }
        Object.defineProperty(t, "__esModule", { value: true });
        var s = function() {
          function e2(e3, t2) {
            this.braceDepth = e3, this.stringref = t2;
          }
          return e2;
        }();
        t.StringRef = s, t.isStringRef = r;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          return "string" == typeof e2.key && void 0 !== e2.value;
        }
        function s(e2) {
          if (r(e2))
            return { key: e2.key, value: o(e2.value) };
          throw new Error("Was not a KeyVal: " + JSON.stringify(e2));
        }
        function o(e2) {
          if (c.isNumber(e2))
            return e2;
          var t2 = c.mustBeArray(e2.data);
          switch (e2.type) {
            case "quotedstringwrapper":
              return 1 === t2.length && c.isNumber(t2[0]) ? t2[0] : new u.OuterQuotedString(t2.map(function(e3) {
                return p.parseStringComponent(0, e3);
              }));
            case "bracedstringwrapper":
              return new a.OuterBracedString(t2.map(function(e3) {
                return p.parseStringComponent(0, e3);
              }));
            default:
              throw new Error("Unexpected value: " + JSON.stringify(e2));
          }
        }
        function i(e2) {
          if (e2)
            return c.isNumber(e2) ? e2 : e2.stringify();
        }
        Object.defineProperty(t, "__esModule", { value: true });
        var a = n(2), u = n(1), c = n(0), p = n(3);
        t.isKeyVal = r, t.newKeyVal = s, t.parseFieldValue = o, t.normalizeFieldValue = i;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          var t2 = s(e2), n2 = t2.key, r2 = t2.value;
          return new $(n2, r2);
        }
        function s(e2) {
          if (b.isKeyVal(e2))
            return b.newKeyVal(e2);
          if ("string" !== e2.type)
            throw new Error("Unexpected node: " + JSON.stringify(e2));
          return s(e2.data);
        }
        function o(e2) {
          var t2 = {};
          return Object.keys(e2).forEach(function(n2) {
            t2[n2] || (t2[n2] = a({}, t2, e2, e2[n2]));
          }), t2;
        }
        function i(e2, t2, n2, r2) {
          return e2.data.map(function(e3) {
            if (y.isString(e3) || y.isNumber(e3))
              return e3;
            if (l.isStringRef(e3))
              return u(t2, r2, e3, n2);
            if (h.isBibStringComponent(e3))
              return c(e3, t2, n2, r2);
            throw new Error();
          });
        }
        function a(e2, t2, n2, r2) {
          return y.isNumber(r2) ? r2 : m.isOuterBracedString(r2) || f.isOuterQuotedString(r2) ? p(r2, e2, t2, n2) : l.isStringRef(r2) ? u(e2, n2, r2, t2) : r2;
        }
        function u(e2, t2, n2, r2) {
          var s2 = n2.stringref;
          if (e2[s2])
            throw new Error("Cycle detected: " + s2);
          if (r2[s2])
            return r2[s2];
          if (!t2[s2])
            throw new Error('Unresolved reference: "' + n2.stringref + '" (' + JSON.stringify(n2) + ")");
          return r2[s2] = a(Object.assign({}, e2, (o2 = {}, o2[s2] = true, o2)), r2, t2, t2[s2]), r2[s2];
          var o2;
        }
        function c(e2, t2, n2, r2) {
          var s2 = i(e2, t2, n2, r2), o2 = e2.braceDepth;
          if (f.isQuotedString(e2))
            return new f.QuotedString(o2, s2);
          if (m.isBracedString(e2))
            return new m.BracedString(o2, s2);
          if (f.isOuterQuotedString(e2))
            return new f.OuterQuotedString(s2);
          if (m.isOuterBracedString(e2))
            return new m.OuterBracedString(s2);
          throw new Error();
        }
        function p(e2, t2, n2, r2) {
          var s2 = c(e2, t2, n2, r2);
          if (!m.isOuterBracedString(s2) && !f.isOuterQuotedString(s2))
            throw new Error();
          return s2;
        }
        Object.defineProperty(t, "__esModule", { value: true });
        var b = n(6), l = n(5), f = n(1), m = n(2), y = n(0), h = n(3), $ = function() {
          function e2(e3, t2) {
            this.type = "string", this.key = e3, this.value = t2;
          }
          return e2;
        }();
        t.BibStringEntry = $, t.newStringEntry = r, t.resolveStrings = o, t.resolveStringReferences = i, t.resolveStringReference = a, t.copyWithResolvedStringReferences = c, t.copyOuterWithResolvedStringReferences = p;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          var t2 = $.toStringBibStringData(e2);
          return t2 ? t2.charAt(0) : "";
        }
        function s(e2) {
          return e2.length > 0 && o(e2[0]);
        }
        function o(e2) {
          if (f.isString(e2)) {
            if (!e2)
              return false;
            var t2 = e2.charAt(0);
            return t2.toLowerCase() === t2 && t2.toUpperCase() !== t2;
          }
          if (m.isQuotedString(e2))
            return !(!e2.data || e2.data.length <= 0) && o(e2.data[0]);
          if (y.isStringRef(e2) || m.isOuterQuotedString(e2) || h.isOuterBracedString(e2))
            throw new Error("Should not do this test on this type");
          return false;
        }
        function i(e2) {
          for (var t2 = $.splitOnPattern(e2, d), n2 = -1, r2 = -1, o2 = -1, i2 = 0; i2 < t2.length - 1; i2++)
            s(t2[i2]) && (n2 < 0 && (n2 = i2), r2 = i2 + 1);
          o2 = n2 >= 0 ? n2 : t2.length - 1;
          var a2 = n2 >= 0 ? u(t2, n2, r2) : [], c2 = u(t2, 0, o2), p2 = u(t2, Math.max(r2, o2), t2.length);
          return new _(c2, a2, p2, []);
        }
        function a(e2, t2) {
          for (var n2 = $.splitOnPattern(e2, d), r2 = $.splitOnPattern(t2, d), o2 = -1, i2 = -1, a2 = 0; a2 < n2.length - 1; a2++)
            s(n2[a2]) && (o2 < 0 && (o2 = a2), i2 = a2 + 1);
          var c2 = o2 >= 0 ? u(n2, 0, i2) : [], p2 = r2, b2 = u(n2, Math.max(i2, 0));
          return new _(p2, c2, b2, []);
        }
        function u(e2, t2, n2) {
          for (var r2 = [], s2 = t2; s2 < (void 0 === n2 ? e2.length : n2); s2++)
            r2.push(e2[s2]);
          return r2;
        }
        function c(e2, t2, n2) {
          for (var r2 = $.splitOnPattern(e2, d), o2 = $.splitOnPattern(n2, d), i2 = $.splitOnPattern(t2, d), a2 = -1, c2 = -1, p2 = 0; p2 < r2.length - 1; p2++)
            s(r2[p2]) && (a2 < 0 && (a2 = p2), c2 = p2 + 1);
          var b2 = a2 >= 0 ? u(r2, 0, c2) : [], l2 = u(r2, Math.max(c2, 0));
          return new _(o2, b2, l2, i2);
        }
        function p(e2) {
          var t2 = $.splitOnComma(e2);
          switch (t2.length) {
            case 1:
              return i(t2[0]);
            case 2:
              return a(l(t2[0]), l(t2[1]));
            case 3:
              return c(l(t2[0]), l(t2[1]), l(t2[2]));
            default:
              throw new Error("Could not parse author name: partitioned as " + JSON.stringify(t2) + " in " + JSON.stringify(e2));
          }
        }
        function b(e2) {
          return void 0 !== e2;
        }
        function l(e2) {
          if (b(e2))
            return e2;
          throw new Error("???????");
        }
        Object.defineProperty(t, "__esModule", { value: true });
        var f = n(0), m = n(1), y = n(5), h = n(2), $ = n(3), d = /\s+/g, _ = function() {
          function e2(e3, t2, n2, s2) {
            this.firstNames$ = e3, this.vons$ = t2, this.lastNames$ = n2, this.jrs$ = s2, this.initials = e3.map(r), this.firstNames = e3.map($.toStringBibStringData), this.vons = t2.map($.toStringBibStringData), this.lastNames = n2.map($.toStringBibStringData), this.jrs = s2.map($.toStringBibStringData), this.id = this.firstNames.join("-") + "-" + this.vons.join("-") + "-" + this.lastNames.join("-") + "-" + this.jrs.join("-");
          }
          return e2;
        }();
        t.AuthorName = _, t.parseAuthorName = p;
        var g = function() {
          function e2(e3, t2, n2) {
            this.first = e3, this.von = t2, this.last = n2;
          }
          return e2;
        }();
        t.Authorrr = g;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          return p.parseAuthorName(e2);
        }
        function s(e2) {
          return c.isNumber(e2) ? o([e2]) : o(e2.data, b.isOuterQuotedString(e2));
        }
        function o(e2, t2) {
          var n2 = f.globContiguousStrings(f.flattenQuotedStrings(e2, t2)), r2 = n2.map(function(e3) {
            return f.isContiguousSimpleString(e3) ? f.joinContiguousSimpleStrings(e3) : e3;
          });
          return f.splitOnAnd(r2);
        }
        function i(e2) {
          if (!a(e2))
            throw new Error();
          return e2;
        }
        function a(e2) {
          return c.isArray(e2.authors$) && "authors" === e2.type;
        }
        var u = this && this.__extends || function() {
          var e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t2) {
            e3.__proto__ = t2;
          } || function(e3, t2) {
            for (var n2 in t2)
              t2.hasOwnProperty(n2) && (e3[n2] = t2[n2]);
          };
          return function(t2, n2) {
            function r2() {
              this.constructor = t2;
            }
            e2(t2, n2), t2.prototype = null === n2 ? Object.create(n2) : (r2.prototype = n2.prototype, new r2());
          };
        }();
        Object.defineProperty(t, "__esModule", { value: true });
        var c = n(0), p = n(8), b = n(1), l = n(4), f = n(3), m = function(e2) {
          function t2(t3) {
            var n2 = this, o2 = c.isNumber(t3) ? [t3] : t3.data;
            n2 = e2.call(this, "authors", o2) || this;
            var i2 = s(t3);
            return n2.authors$ = i2.map(function(e3) {
              return r(e3);
            }), n2;
          }
          return u(t2, e2), t2;
        }(l.BibOuterStringComponent);
        t.Authors = m, t.determineAuthorNames$ = s, t.mustBeAuthors = i, t.isAuthors = a;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          return "comment" === e2.type && o.isArray(e2.data);
        }
        function s(e2) {
          return o.flattenMyArray(e2).map(u);
        }
        Object.defineProperty(t, "__esModule", { value: true });
        var o = n(0), i = function() {
          function e2(e3) {
            this.type = "comment", this.data = e3, this.string = e3.join("");
          }
          return e2.prototype.toString = function() {
            return this.string;
          }, e2;
        }();
        t.BibComment = i;
        var a = function() {
          function e2(e3, t2) {
            this.type = e3, this.data = t2, this.string = t2.join("");
          }
          return e2.prototype.toString = function() {
            return this.string;
          }, e2;
        }();
        t.CommentEntry = a, t.isBibComment = r;
        var u = function(e2) {
          return o.isString(e2) ? e2 : "number" == typeof e2 ? e2.toString() : "@bib" === e2.type ? "@" + o.mustBeString(e2.string) : "escapedEntry" === e2.type ? "\\" + u(e2.data) : o.mustBeString(e2.string);
        };
        t.flattenPlainText = s;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          var t2 = {};
          return Object.keys(e2).forEach(function(n2) {
            t2[n2] = u.parseFieldValue(e2[n2]);
          }), t2;
        }
        function s(e2) {
          return "string" == typeof e2.type && "string" == typeof e2._id && !!e2.fields;
        }
        function o(e2, t2) {
          var n2 = {}, r2 = e2.fields;
          return Object.keys(e2.fields).forEach(function(e3) {
            var s2 = a.resolveStringReference({}, n2, t2, r2[e3]);
            switch (e3) {
              case "author":
                n2[e3] = new i.Authors(s2);
                break;
              case "title":
                n2[e3] = s2;
                break;
              case "incollection":
              default:
                n2[e3] = s2;
            }
          }), new c(e2.type, e2._id, n2);
        }
        Object.defineProperty(t, "__esModule", { value: true });
        var i = n(9), a = n(7), u = n(6), c = function() {
          function e2(e3, t2, n2) {
            this.type = e3, this._id = t2, this.fields = n2, this.sortkey$ = "", this.title$ = "";
          }
          return e2.prototype.getField = function(e3) {
            return this.fields[e3.toLowerCase()];
          }, e2.prototype.getFieldAsString = function(e3) {
            var t2 = this.getField(e3);
            return u.normalizeFieldValue(t2);
          }, e2.prototype.getAuthors = function() {
            var e3 = this.fields.author;
            return void 0 === e3 ? e3 : i.mustBeAuthors(e3);
          }, e2;
        }();
        t.BibEntry = c, t.parseEntryFields = r, t.isBibEntry = s, t.processEntry = o;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          return "preamble" === e2.type && !!e2.data;
        }
        function s(e2) {
          var t2 = i.parseBibEntriesAndNonEntries(o.mustBeArray(e2.data));
          return new a(t2);
        }
        Object.defineProperty(t, "__esModule", { value: true });
        var o = n(0), i = n(13), a = function() {
          function e2(e3) {
            this.type = "preamble", this.data = e3, this.string = e3.join("");
          }
          return e2.prototype.toString = function() {
            return this.string;
          }, e2;
        }();
        t.Preamble = a, t.isPreamble = r, t.newPreambleNode = s;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          if (!u.isArray(e2.data) || "NON_ENTRY" !== e2.type)
            throw new Error();
          return new b.BibComment(b.flattenPlainText(e2.data));
        }
        function s(e2) {
          switch (typeof e2) {
            case "object":
              var t2 = e2.data;
              if ("string" == typeof t2["@type"])
                return new p.BibEntry(t2["@type"], t2._id, p.parseEntryFields(t2.fields));
              switch (u.mustBeString(t2.type)) {
                case "string":
                  return f.newStringEntry(t2);
                case "preamble":
                  return l.newPreambleNode(t2);
                default:
                  throw new Error("Unexpected entry parsed: " + t2.type);
              }
            default:
              throw new Error("Expected object as data for entry");
          }
        }
        function o(e2) {
          var n2 = new i.Parser(a.grammar.ParserRules, a.grammar.ParserStart);
          n2.feed(new m.default(e2).readTokens());
          var r2 = n2.results, s2 = r2[0];
          return new y(t.parseBibEntriesAndNonEntries(s2));
        }
        Object.defineProperty(t, "__esModule", { value: true });
        var i = n(19), a = n(20), u = n(0), c = n(6), p = n(11), b = n(10), l = n(12), f = n(7), m = n(21), y = function() {
          function e2(e3) {
            var t2 = this;
            this.content = e3, this.comments = e3.filter(b.isBibComment).map(function(e4) {
              if (b.isBibComment(e4))
                return e4;
              throw new Error();
            }), this.preambles_raw = e3.filter(function(e4) {
              return l.isPreamble(e4);
            }).map(function(e4) {
              if (l.isPreamble(e4))
                return e4;
              throw new Error();
            }), this.preamble$ = this.preambles_raw.map(function(e4) {
              return e4.toString();
            }).join("\n");
            var n2 = {};
            this.content.forEach(function(e4) {
              if (c.isKeyVal(e4)) {
                if (n2[e4.key])
                  throw new Error("String with id " + e4.key + " was defined more than once");
                n2[e4.key] = e4.value;
              }
            }), this.strings_raw = n2, this.strings$ = f.resolveStrings(n2), this.entries_raw = e3.filter(function(e4) {
              return p.isBibEntry(e4);
            }).map(function(e4) {
              if (p.isBibEntry(e4))
                return e4;
              throw new Error();
            });
            var r2 = {};
            this.entries_raw.forEach(function(e4) {
              var n3 = e4._id.toLowerCase();
              if (r2[n3])
                throw new Error("Entry with id " + n3 + " was defined more than once");
              r2[n3] = p.processEntry(e4, t2.strings$);
            }), this.entries$ = r2;
          }
          return e2.prototype.getEntry = function(e3) {
            return this.entries$[e3.toLowerCase()];
          }, e2;
        }();
        t.BibFilePresenter = y, t.parseBibEntriesAndNonEntries = function(e2) {
          return e2.map(function(e3) {
            switch (e3.type) {
              case "NON_ENTRY":
                return r(e3);
              case "ENTRY":
                return s(e3);
              default:
                throw new Error("Expected ENTRY or NON_ENTRY");
            }
          });
        }, t.parseBibFile = o;
      }, function(e, t, n) {
        "use strict";
        function r(e2, t2) {
          return { type: e2, string: t2 };
        }
        function s(e2) {
          return t.specialChars.hasOwnProperty(e2);
        }
        function o(e2) {
          return t.escapableChars.hasOwnProperty(e2);
        }
        Object.defineProperty(t, "__esModule", { value: true }), t.newToken = r, t.specialChars = { "@": true, "(": true, ")": true, "{": true, "}": true, "#": true, "=": true, ",": true, "\\": true, '"': true }, t.isSpecialChar = s, t.escapableChars = { "\\": true, "@": true, "{": true, "}": true }, t.isEscapableChar = o;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          return { type: "ws", string: e2 };
        }
        function s(e2) {
          return "string" == typeof e2.string && e2.type === t.WS;
        }
        function o(e2) {
          return t.singleWhitespaces.hasOwnProperty(e2);
        }
        Object.defineProperty(t, "__esModule", { value: true }), t.WS = "ws", t.newWhitespace = r, t.isWhitespace = s, t.singleWhitespaces = { " ": true, "	": true, "\r": true, "\n": true }, t.isSingleWhiteSpaceCharacter = o;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          return { type: "number", string: e2 };
        }
        function s(e2) {
          return t.numericChars.hasOwnProperty(e2);
        }
        Object.defineProperty(t, "__esModule", { value: true }), t.newNumber = r, t.numericChars = { 0: true, 1: true, 2: true, 3: true, 4: true, 5: true, 6: true, 7: true, 8: true, 9: true }, t.isNum = s;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          for (var n2 in e2)
            t.hasOwnProperty(n2) || (t[n2] = e2[n2]);
        }
        Object.defineProperty(t, "__esModule", { value: true }), r(n(8)), r(n(9)), r(n(18)), r(n(10)), r(n(11)), r(n(12)), r(n(7)), r(n(3)), r(n(4)), r(n(2)), r(n(1)), r(n(5)), r(n(6)), r(n(13)), r(n(0));
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          return t.optionalFields.hasOwnProperty(e2);
        }
        function s(e2) {
          return t.mandatoryFields.hasOwnProperty(e2);
        }
        function o(e2) {
          return s(e2) ? t.mandatoryFields[e2] : [];
        }
        function i(e2) {
          return r(e2) ? t.optionalFields[e2] : [];
        }
        Object.defineProperty(t, "__esModule", { value: true });
        var a = n(0);
        t.address = "address", t.author = "author", t.booktitle = "booktitle", t.chapter = "chapter", t.edition = "edition", t.editor = "editor", t.howpublished = "howpublished", t.institution = "institution", t.journal = "journal", t.month = "month", t.note = "note", t.number = "number", t.organization = "organization", t.pages = "pages", t.publisher = "publisher", t.school = "school", t.series = "series", t.title = "title", t.type = "type", t.volume = "volume", t.year = "year", t.optionalFields = { book: [["volume", "number"], "series", "address", "edition", "month", "note"], booklet: ["author", "howpublished", "address", "address", "month", "year", "note"], conference: ["editor", ["volume", "number"], "series", "pages", "address", "month", "organization", "publisher", "note"], inproceedings: ["editor", ["volume", "number"], t.series, "pages", "address", "month", "organization", "publisher", "note"], inbook: ["volume", "number", "series", "type", "address", "edition", "month", "note"], incollection: ["editor", ["volume", "number"], "series", "type", "chapter", "pages", "address", "edition", "month", "note"], manual: ["author", "organization", "year", "address", "edition", "month", "note"], mastersthesis: ["type", "address", "month", "note"], misc: [], phdthesis: ["type", "address", "month", "note"], proceedings: ["editor", ["volume", "number"], "series", "address", "month", "organization", "publisher", "note"], techreport: ["type", "address", "number", "month", "note"], unpublished: ["month", "year"] }, t.mandatoryFields = { article: ["author", "title", "year", "journal"], book: [["author", "editor"], "title", "publisher", "year"], booklet: ["title"], conference: ["author", "title", "booktitle", "year"], inproceedings: ["author", "title", "booktitle", "year"], inbook: [["author", "editor"], "title", ["chapter", "pages"]], incollection: ["author", "title", "booktitle", "publisher", "year"], manual: ["title"], mastersthesis: ["author", "title", "school", "year"], misc: [["author", "title", "howpublished", "year", "month", "note"]], phdthesis: ["author", "title", "school", "year"], proceedings: ["year", "title"], techreport: ["author", "title", "institution", "year"], unpublished: ["author", "title", "note"] }, t.hasOptionalFields = r, t.hasMandatoryFields = s, t.getMandatoryFields = o, t.getOptionalFields = i, t.findError = function(e2, t2) {
          var n2 = e2.fields;
          if (a.isString(t2)) {
            if (!n2[t2])
              return new Error("Warning: expected " + e2.type + " with id " + e2._id + " to have the field: " + t2);
          } else if (a.isArray(t2)) {
            var r2 = t2.reduce(function(e3, t3) {
              if (a.isString(t3))
                return e3 && n2.hasOwnProperty(t3);
              throw new Error();
            }, true);
            if (!r2)
              return new Error("Expected " + e2.type + " with id " + e2._id + " to have one of the following fields: " + t2);
          }
        };
      }, function(e, t) {
        !function(t2, n) {
          "object" == typeof e && e.exports ? e.exports = n() : t2.nearley = n();
        }(this, function() {
          function e2(t3, n2, r2) {
            return this.id = ++e2.highestId, this.name = t3, this.symbols = n2, this.postprocess = r2, this;
          }
          function t2(e3, t3, n2, r2) {
            this.rule = e3, this.dot = t3, this.reference = n2, this.data = [], this.wantedBy = r2, this.isComplete = this.dot === e3.symbols.length;
          }
          function n(e3, t3) {
            this.grammar = e3, this.index = t3, this.states = [], this.wants = {}, this.scannable = [], this.completed = {};
          }
          function r(e3, t3) {
            this.rules = e3, this.start = t3 || this.rules[0].name;
            var n2 = this.byName = {};
            this.rules.forEach(function(e4) {
              n2.hasOwnProperty(e4.name) || (n2[e4.name] = []), n2[e4.name].push(e4);
            });
          }
          function s() {
            this.reset("");
          }
          function o(e3, t3, o2) {
            if (e3 instanceof r)
              var i = e3, o2 = t3;
            else
              var i = r.fromCompiled(e3, t3);
            this.grammar = i, this.options = { keepHistory: false, lexer: i.lexer || new s() };
            for (var a in o2 || {})
              this.options[a] = o2[a];
            this.lexer = this.options.lexer, this.lexerState = void 0;
            var u = new n(i, 0);
            this.table = [u];
            u.wants[i.start] = [], u.predict(i.start), u.process(), this.current = 0;
          }
          return e2.highestId = 0, e2.prototype.toString = function(e3) {
            function t3(e4) {
              return e4.literal ? JSON.stringify(e4.literal) : e4.type ? "%" + e4.type : e4.toString();
            }
            var n2 = void 0 === e3 ? this.symbols.map(t3).join(" ") : this.symbols.slice(0, e3).map(t3).join(" ") + " ● " + this.symbols.slice(e3).map(t3).join(" ");
            return this.name + " → " + n2;
          }, t2.prototype.toString = function() {
            return "{" + this.rule.toString(this.dot) + "}, from: " + (this.reference || 0);
          }, t2.prototype.nextState = function(e3) {
            var n2 = new t2(this.rule, this.dot + 1, this.reference, this.wantedBy);
            return n2.left = this, n2.right = e3, n2.isComplete && (n2.data = n2.build()), n2;
          }, t2.prototype.build = function() {
            var e3 = [], t3 = this;
            do {
              e3.push(t3.right.data), t3 = t3.left;
            } while (t3.left);
            return e3.reverse(), e3;
          }, t2.prototype.finish = function() {
            this.rule.postprocess && (this.data = this.rule.postprocess(this.data, this.reference, o.fail));
          }, n.prototype.process = function(e3) {
            for (var t3 = this.states, n2 = this.wants, r2 = this.completed, s2 = 0; s2 < t3.length; s2++) {
              var i = t3[s2];
              if (i.isComplete) {
                if (i.finish(), i.data !== o.fail) {
                  for (var a = i.wantedBy, u = a.length; u--; ) {
                    var c = a[u];
                    this.complete(c, i);
                  }
                  if (i.reference === this.index) {
                    var p = i.rule.name;
                    (this.completed[p] = this.completed[p] || []).push(i);
                  }
                }
              } else {
                var p = i.rule.symbols[i.dot];
                if ("string" != typeof p) {
                  this.scannable.push(i);
                  continue;
                }
                if (n2[p]) {
                  if (n2[p].push(i), r2.hasOwnProperty(p))
                    for (var b = r2[p], u = 0; u < b.length; u++) {
                      var l = b[u];
                      this.complete(i, l);
                    }
                } else
                  n2[p] = [i], this.predict(p);
              }
            }
          }, n.prototype.predict = function(e3) {
            for (var n2 = this.grammar.byName[e3] || [], r2 = 0; r2 < n2.length; r2++) {
              var s2 = n2[r2], o2 = this.wants[e3], i = new t2(s2, 0, this.index, o2);
              this.states.push(i);
            }
          }, n.prototype.complete = function(e3, t3) {
            var n2 = t3.rule.name;
            if (e3.rule.symbols[e3.dot] === n2) {
              var r2 = e3.nextState(t3);
              this.states.push(r2);
            }
          }, r.fromCompiled = function(t3, n2) {
            var s2 = t3.Lexer;
            t3.ParserStart && (n2 = t3.ParserStart, t3 = t3.ParserRules);
            var t3 = t3.map(function(t4) {
              return new e2(t4.name, t4.symbols, t4.postprocess);
            }), o2 = new r(t3, n2);
            return o2.lexer = s2, o2;
          }, s.prototype.reset = function(e3, t3) {
            this.buffer = e3, this.index = 0, this.line = t3 ? t3.line : 1, this.lastLineBreak = t3 ? -t3.col : 0;
          }, s.prototype.next = function() {
            if (this.index < this.buffer.length) {
              var e3 = this.buffer[this.index++];
              return "\n" === e3 && (this.line += 1, this.lastLineBreak = this.index), { value: e3 };
            }
          }, s.prototype.save = function() {
            return { line: this.line, col: this.index - this.lastLineBreak };
          }, s.prototype.formatError = function(e3, t3) {
            var n2 = this.buffer;
            if ("string" == typeof n2) {
              var r2 = n2.indexOf("\n", this.index);
              -1 === r2 && (r2 = n2.length);
              var s2 = n2.substring(this.lastLineBreak, r2), o2 = this.index - this.lastLineBreak;
              return t3 += " at line " + this.line + " col " + o2 + ":\n\n", t3 += "  " + s2 + "\n", t3 += "  " + Array(o2).join(" ") + "^";
            }
            return t3 + " at index " + (this.index - 1);
          }, o.fail = {}, o.prototype.feed = function(e3) {
            var t3 = this.lexer;
            t3.reset(e3, this.lexerState);
            for (var r2; r2 = t3.next(); ) {
              var o2 = this.table[this.current];
              this.options.keepHistory || delete this.table[this.current - 1];
              var i = this.current + 1, a = new n(this.grammar, i);
              this.table.push(a);
              for (var u = r2.value, c = t3.constructor === s ? r2.value : r2, p = o2.scannable, b = p.length; b--; ) {
                var l = p[b], f = l.rule.symbols[l.dot];
                if (f.test ? f.test(c) : f.type ? f.type === r2.type : f.literal === u) {
                  var m = l.nextState({ data: c, token: r2, isToken: true, reference: i - 1 });
                  a.states.push(m);
                }
              }
              if (a.process(), 0 === a.states.length) {
                var y = this.lexer.formatError(r2, "invalid syntax") + "\n";
                y += "Unexpected " + (r2.type ? r2.type + " token: " : ""), y += JSON.stringify(void 0 !== r2.value ? r2.value : r2) + "\n";
                var h = new Error(y);
                throw h.offset = this.current, h.token = r2, h;
              }
              this.options.keepHistory && (o2.lexerState = t3.save()), this.current++;
            }
            return o2 && (this.lexerState = t3.save()), this.results = this.finish(), this;
          }, o.prototype.save = function() {
            var e3 = this.table[this.current];
            return e3.lexerState = this.lexerState, e3;
          }, o.prototype.restore = function(e3) {
            var t3 = e3.index;
            this.current = t3, this.table[t3] = e3, this.table.splice(t3 + 1), this.lexerState = e3.lexerState, this.results = this.finish();
          }, o.prototype.rewind = function(e3) {
            if (!this.options.keepHistory)
              throw new Error("set option `keepHistory` to enable rewinding");
            this.restore(this.table[e3]);
          }, o.prototype.finish = function() {
            var e3 = [], t3 = this.grammar.start;
            return this.table[this.table.length - 1].states.forEach(function(n2) {
              n2.rule.name === t3 && n2.dot === n2.rule.symbols.length && 0 === n2.reference && n2.data !== o.fail && e3.push(n2);
            }), e3.map(function(e4) {
              return e4.data;
            });
          }, { Parser: o, Grammar: r, Rule: e2 };
        });
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          return e2[0];
        }
        function s(e2, t2) {
          if ("keyval" !== t2.type)
            throw new Error("Expected a keyval object");
          var n2 = t2.key.toLowerCase();
          return e2.fields[n2] ? void 0 : (e2.fields[n2] = t2.value, e2);
        }
        function o(e2) {
          for (var t2 = [], n2 = 0; n2 < e2.length; n2++)
            if ("object" == typeof e2[n2]) {
              if (!e2[n2].string)
                throw new Error("Expected token to have a string field called 'string' in object " + JSON.stringify(e2[n2]));
              t2.push(e2[n2].string);
            } else {
              if ("string" != typeof e2[n2] && "number" != typeof e2[n2])
                throw new Error("Could not handle token " + JSON.stringify(e2[n2]) + " in array " + JSON.stringify(e2));
              t2.push(e2[n2]);
            }
          return t2.join("");
        }
        Object.defineProperty(t, "__esModule", { value: true });
        var i = function(e2) {
          return e2.constructor === Number || "object" == typeof e2 && "number" === e2.type;
        }, a = { test: function(e2) {
          return "object" == typeof e2 && "id" === e2.type;
        } }, u = { test: function(e2) {
          return "object" == typeof e2 && "@bib" === e2.type;
        } }, c = { test: function(e2) {
          return "object" == typeof e2 && "@string" === e2.type;
        } }, p = { test: function(e2) {
          return "object" == typeof e2 && "@preamble" === e2.type;
        } }, b = { test: function(e2) {
          return "object" == typeof e2 && "@comment" === e2.type;
        } }, l = { test: function(e2) {
          return "object" == typeof e2 && "ws" === e2.type;
        } }, f = { test: i }, m = { literal: "#" }, y = { literal: "=" }, h = { literal: "\\" }, $ = { literal: "(" }, d = { literal: ")" }, _ = { literal: "{" }, g = { literal: "}" }, v = { literal: '"' }, x = { literal: "," };
        t.grammar = { Lexer: void 0, ParserRules: [{ name: "main$ebnf$1", symbols: ["non_entry"], postprocess: r }, { name: "main$ebnf$1", symbols: [], postprocess: function() {
        } }, { name: "main$ebnf$2", symbols: [] }, { name: "main$ebnf$2$subexpression$1$ebnf$1", symbols: ["non_entry"], postprocess: r }, { name: "main$ebnf$2$subexpression$1$ebnf$1", symbols: [], postprocess: function() {
        } }, { name: "main$ebnf$2$subexpression$1", symbols: ["entry", "main$ebnf$2$subexpression$1$ebnf$1"] }, { name: "main$ebnf$2", symbols: ["main$ebnf$2", "main$ebnf$2$subexpression$1"], postprocess: function(e2) {
          return e2[0].concat([e2[1]]);
        } }, { name: "main", symbols: ["main$ebnf$1", "main$ebnf$2"], postprocess: function(e2) {
          var t2 = [];
          e2[0] && t2.push({ type: "NON_ENTRY", data: e2[0] });
          for (var n2 = 0; n2 < e2[1].length; n2++)
            t2.push({ type: "ENTRY", data: e2[1][n2][0] }), e2[1][n2][1] && t2.push({ type: "NON_ENTRY", data: e2[1][n2][1] });
          return t2;
        } }, { name: "_$ebnf$1", symbols: [] }, { name: "_$ebnf$1", symbols: ["_$ebnf$1", l], postprocess: function(e2) {
          return e2[0].concat([e2[1]]);
        } }, { name: "_", symbols: ["_$ebnf$1"] }, { name: "entry_decl$subexpression$1", symbols: [u] }, { name: "entry_decl$subexpression$1", symbols: [c] }, { name: "entry_decl$subexpression$1", symbols: [p] }, { name: "entry_decl$subexpression$1", symbols: [b] }, { name: "entry_decl", symbols: ["entry_decl$subexpression$1"], postprocess: function(e2) {
          return e2[0][0];
        } }, { name: "entry$subexpression$1", symbols: ["bib_entry"] }, { name: "entry$subexpression$1", symbols: ["string_entry"] }, { name: "entry$subexpression$1", symbols: ["preamble_entry"] }, { name: "entry$subexpression$1", symbols: ["comment_entry"] }, { name: "entry", symbols: ["entry$subexpression$1"], postprocess: function(e2) {
          return e2[0][0];
        } }, { name: "comment", symbols: ["main"], postprocess: function(e2) {
          return e2[0];
        } }, { name: "comment_liberal$ebnf$1", symbols: [] }, { name: "comment_liberal$ebnf$1$subexpression$1", symbols: [/./] }, { name: "comment_liberal$ebnf$1", symbols: ["comment_liberal$ebnf$1", "comment_liberal$ebnf$1$subexpression$1"], postprocess: function(e2) {
          return e2[0].concat([e2[1]]);
        } }, { name: "comment_liberal", symbols: ["comment_liberal$ebnf$1"], postprocess: function(e2) {
          for (var t2 = [], n2 = 0; n2 < e2[0].length; n2++)
            t2.push(e2[0][n2][0]);
          return t2;
        } }, { name: "entry_body_comment$subexpression$1$macrocall$2", symbols: ["comment"] }, { name: "entry_body_comment$subexpression$1$macrocall$1", symbols: [$, "entry_body_comment$subexpression$1$macrocall$2", d], postprocess: function(e2) {
          return e2[1];
        } }, { name: "entry_body_comment$subexpression$1", symbols: ["entry_body_comment$subexpression$1$macrocall$1"] }, { name: "entry_body_comment$subexpression$1$macrocall$4", symbols: ["comment"] }, { name: "entry_body_comment$subexpression$1$macrocall$3", symbols: [_, "entry_body_comment$subexpression$1$macrocall$4", g], postprocess: function(e2) {
          return e2[1];
        } }, { name: "entry_body_comment$subexpression$1", symbols: ["entry_body_comment$subexpression$1$macrocall$3"] }, { name: "entry_body_comment", symbols: ["entry_body_comment$subexpression$1"], postprocess: function(e2) {
          return e2[0][0][0];
        } }, { name: "entry_body_string$subexpression$1$macrocall$2", symbols: ["keyval"] }, { name: "entry_body_string$subexpression$1$macrocall$1", symbols: [$, "_", "entry_body_string$subexpression$1$macrocall$2", "_", d], postprocess: function(e2) {
          return e2[2];
        } }, { name: "entry_body_string$subexpression$1", symbols: ["entry_body_string$subexpression$1$macrocall$1"] }, { name: "entry_body_string$subexpression$1$macrocall$4", symbols: ["keyval"] }, { name: "entry_body_string$subexpression$1$macrocall$3", symbols: [_, "_", "entry_body_string$subexpression$1$macrocall$4", "_", g], postprocess: function(e2) {
          return e2[2];
        } }, { name: "entry_body_string$subexpression$1", symbols: ["entry_body_string$subexpression$1$macrocall$3"] }, { name: "entry_body_string", symbols: ["entry_body_string$subexpression$1"], postprocess: function(e2) {
          return e2[0][0][0];
        } }, { name: "entry_body_bib$subexpression$1$macrocall$2", symbols: ["bib_content"] }, { name: "entry_body_bib$subexpression$1$macrocall$1", symbols: [$, "_", "entry_body_bib$subexpression$1$macrocall$2", "_", d], postprocess: function(e2) {
          return e2[2];
        } }, { name: "entry_body_bib$subexpression$1", symbols: ["entry_body_bib$subexpression$1$macrocall$1"] }, { name: "entry_body_bib$subexpression$1$macrocall$4", symbols: ["bib_content"] }, { name: "entry_body_bib$subexpression$1$macrocall$3", symbols: [_, "_", "entry_body_bib$subexpression$1$macrocall$4", "_", g], postprocess: function(e2) {
          return e2[2];
        } }, { name: "entry_body_bib$subexpression$1", symbols: ["entry_body_bib$subexpression$1$macrocall$3"] }, { name: "entry_body_bib", symbols: ["entry_body_bib$subexpression$1"], postprocess: function(e2) {
          return e2[0][0][0];
        } }, { name: "bib_content$ebnf$1", symbols: [] }, { name: "bib_content$ebnf$1$subexpression$1", symbols: ["keyval", "_", x, "_"] }, { name: "bib_content$ebnf$1", symbols: ["bib_content$ebnf$1", "bib_content$ebnf$1$subexpression$1"], postprocess: function(e2) {
          return e2[0].concat([e2[1]]);
        } }, { name: "bib_content$ebnf$2$subexpression$1", symbols: ["_", x] }, { name: "bib_content$ebnf$2", symbols: ["bib_content$ebnf$2$subexpression$1"], postprocess: r }, { name: "bib_content$ebnf$2", symbols: [], postprocess: function() {
        } }, { name: "bib_content", symbols: ["key_string", "_", x, "_", "bib_content$ebnf$1", "keyval", "bib_content$ebnf$2"], postprocess: function(e2) {
          for (var t2 = { _id: e2[0], fields: [] }, n2 = e2[4], r2 = 0; r2 < n2.length; r2++)
            t2.fields.push(n2[r2][0]);
          return t2.fields.push(e2[5]), t2;
        } }, { name: "bib_entry", symbols: [u, "_", "entry_body_bib"], postprocess: function(e2) {
          var t2 = { _id: e2[2]._id };
          t2["@type"] = e2[0].string, t2.fields = {};
          for (var n2 = e2[2].fields, r2 = 0; r2 < n2.length; r2++)
            s(t2, n2[r2]);
          return t2;
        } }, { name: "string_entry", symbols: [c, "_", "entry_body_string"], postprocess: function(e2) {
          return { type: "string", data: e2[2] };
        } }, { name: "preamble_entry", symbols: [p, "_", "entry_body_comment"], postprocess: function(e2) {
          return { type: "preamble", data: e2[2] };
        } }, { name: "comment_entry", symbols: [b, "_", "entry_body_comment"], postprocess: function(e2) {
          return { type: "comment", data: e2[2] };
        } }, { name: "keyval", symbols: ["key_string", "_", y, "_", "value_string"], postprocess: function(e2) {
          return { type: "keyval", key: e2[0], value: e2[4] };
        } }, { name: "braced_string$ebnf$1", symbols: [] }, { name: "braced_string$ebnf$1$subexpression$1", symbols: ["non_brace"] }, { name: "braced_string$ebnf$1$subexpression$1", symbols: ["braced_string"] }, { name: "braced_string$ebnf$1", symbols: ["braced_string$ebnf$1", "braced_string$ebnf$1$subexpression$1"], postprocess: function(e2) {
          return e2[0].concat([e2[1]]);
        } }, { name: "braced_string", symbols: [_, "braced_string$ebnf$1", g], postprocess: function(e2) {
          var t2 = [];
          for (var n2 in e2[1])
            t2.push(e2[1][n2][0]);
          return { type: "braced", data: t2 };
        } }, { name: "quoted_string$ebnf$1", symbols: [] }, { name: "quoted_string$ebnf$1$subexpression$1", symbols: ["escaped_quote"] }, { name: "quoted_string$ebnf$1$subexpression$1", symbols: ["non_quote_non_brace"] }, { name: "quoted_string$ebnf$1$subexpression$1", symbols: ["braced_string"] }, { name: "quoted_string$ebnf$1", symbols: ["quoted_string$ebnf$1", "quoted_string$ebnf$1$subexpression$1"], postprocess: function(e2) {
          return e2[0].concat([e2[1]]);
        } }, { name: "quoted_string", symbols: [v, "quoted_string$ebnf$1", v], postprocess: function(e2) {
          var t2 = [];
          for (var n2 in e2[1])
            t2.push(e2[1][n2][0]);
          return { type: "quotedstring", data: t2 };
        } }, { name: "escaped_quote", symbols: [h, v] }, { name: "non_quote_non_brace$subexpression$1", symbols: [a] }, { name: "non_quote_non_brace$subexpression$1", symbols: [u] }, { name: "non_quote_non_brace$subexpression$1", symbols: [c] }, { name: "non_quote_non_brace$subexpression$1", symbols: [p] }, { name: "non_quote_non_brace$subexpression$1", symbols: [b] }, { name: "non_quote_non_brace$subexpression$1", symbols: [l] }, { name: "non_quote_non_brace$subexpression$1", symbols: [f] }, { name: "non_quote_non_brace$subexpression$1", symbols: [m] }, { name: "non_quote_non_brace$subexpression$1", symbols: [y] }, { name: "non_quote_non_brace$subexpression$1", symbols: [h] }, { name: "non_quote_non_brace$subexpression$1", symbols: [$] }, { name: "non_quote_non_brace$subexpression$1", symbols: [d] }, { name: "non_quote_non_brace$subexpression$1", symbols: [x] }, { name: "non_quote_non_brace", symbols: ["non_quote_non_brace$subexpression$1"] }, { name: "key_string$ebnf$1", symbols: ["stringreftoken"] }, { name: "key_string$ebnf$1", symbols: ["key_string$ebnf$1", "stringreftoken"], postprocess: function(e2) {
          return e2[0].concat([e2[1]]);
        } }, { name: "key_string", symbols: ["key_string$ebnf$1"], postprocess: function(e2) {
          return o(e2[0]).toLowerCase();
        } }, { name: "value_string$subexpression$1$ebnf$1", symbols: [] }, { name: "value_string$subexpression$1$ebnf$1$subexpression$1", symbols: ["_", m, "_", "quoted_string_or_ref"] }, { name: "value_string$subexpression$1$ebnf$1", symbols: ["value_string$subexpression$1$ebnf$1", "value_string$subexpression$1$ebnf$1$subexpression$1"], postprocess: function(e2) {
          return e2[0].concat([e2[1]]);
        } }, { name: "value_string$subexpression$1", symbols: ["quoted_string_or_ref", "value_string$subexpression$1$ebnf$1"] }, { name: "value_string$subexpression$1", symbols: ["braced_string"] }, { name: "value_string", symbols: ["value_string$subexpression$1"], postprocess: function(e2) {
          var t2 = e2[0];
          if (2 === t2.length) {
            var n2 = [];
            n2.push(t2[0]);
            for (var r2 = 0; r2 < t2[1].length; r2++)
              n2.push(t2[1][r2][3]);
            return { type: "quotedstringwrapper", data: n2 };
          }
          if ("braced" === t2[0].type)
            return { type: "bracedstringwrapper", data: t2[0].data };
          throw new Error("Don't know how to handle value " + JSON.stringify(t2[0]));
        } }, { name: "quoted_string_or_ref$subexpression$1", symbols: ["quoted_string"] }, { name: "quoted_string_or_ref$subexpression$1", symbols: ["string_ref"] }, { name: "quoted_string_or_ref$subexpression$1", symbols: [f] }, { name: "quoted_string_or_ref", symbols: ["quoted_string_or_ref$subexpression$1"], postprocess: function(e2) {
          return e2[0][0].type, e2[0][0];
        } }, { name: "string_ref$subexpression$1$ebnf$1", symbols: [] }, { name: "string_ref$subexpression$1$ebnf$1", symbols: ["string_ref$subexpression$1$ebnf$1", "stringreftoken"], postprocess: function(e2) {
          return e2[0].concat([e2[1]]);
        } }, { name: "string_ref$subexpression$1", symbols: ["stringreftoken_n_num", "string_ref$subexpression$1$ebnf$1"] }, { name: "string_ref", symbols: ["string_ref$subexpression$1"], postprocess: function(e2) {
          return { stringref: e2[0][0] + o(e2[0][1]) };
        } }, { name: "stringreftoken$subexpression$1", symbols: [h] }, { name: "stringreftoken$subexpression$1", symbols: [$] }, { name: "stringreftoken$subexpression$1", symbols: [d] }, { name: "stringreftoken$subexpression$1", symbols: [a] }, { name: "stringreftoken$subexpression$1", symbols: [f] }, { name: "stringreftoken$subexpression$1", symbols: [u] }, { name: "stringreftoken$subexpression$1", symbols: [c] }, { name: "stringreftoken$subexpression$1", symbols: [p] }, { name: "stringreftoken$subexpression$1", symbols: [b] }, { name: "stringreftoken", symbols: ["stringreftoken$subexpression$1"], postprocess: function(e2) {
          if ("object" == typeof e2[0][0]) {
            if (!e2[0][0].string)
              throw new Error("Expected " + e2[0] + "to have a 'string' field");
            return e2[0][0].string;
          }
          if ("string" != typeof e2[0][0] && "number" != typeof e2[0][0])
            throw new Error("Expected " + e2[0][0] + " to be a string");
          return e2[0][0];
        } }, { name: "stringreftoken_n_num$subexpression$1", symbols: [h] }, { name: "stringreftoken_n_num$subexpression$1", symbols: [$] }, { name: "stringreftoken_n_num$subexpression$1", symbols: [d] }, { name: "stringreftoken_n_num$subexpression$1", symbols: [a] }, { name: "stringreftoken_n_num$subexpression$1", symbols: [u] }, { name: "stringreftoken_n_num$subexpression$1", symbols: [c] }, { name: "stringreftoken_n_num$subexpression$1", symbols: [p] }, { name: "stringreftoken_n_num$subexpression$1", symbols: [b] }, { name: "stringreftoken_n_num", symbols: ["stringreftoken_n_num$subexpression$1"], postprocess: function(e2) {
          if ("object" == typeof e2[0][0]) {
            if (!e2[0][0].string)
              throw new Error("Expected " + e2[0] + "to have a 'string' field");
            return e2[0][0].string;
          }
          if ("string" != typeof e2[0][0] && "number" != typeof e2[0][0])
            throw new Error("Expected " + e2[0][0] + " to be a string");
          return e2[0][0];
        } }, { name: "non_brace$subexpression$1", symbols: [h] }, { name: "non_brace$subexpression$1", symbols: [$] }, { name: "non_brace$subexpression$1", symbols: [d] }, { name: "non_brace$subexpression$1", symbols: [a] }, { name: "non_brace$subexpression$1", symbols: [v] }, { name: "non_brace$subexpression$1", symbols: [l] }, { name: "non_brace$subexpression$1", symbols: [f] }, { name: "non_brace$subexpression$1", symbols: [x] }, { name: "non_brace$subexpression$1", symbols: [u] }, { name: "non_brace$subexpression$1", symbols: [c] }, { name: "non_brace$subexpression$1", symbols: [p] }, { name: "non_brace$subexpression$1", symbols: [b] }, { name: "non_brace$subexpression$1", symbols: [m] }, { name: "non_brace$subexpression$1", symbols: [y] }, { name: "non_brace", symbols: ["non_brace$subexpression$1"], postprocess: function(e2) {
          return e2[0][0];
        } }, { name: "non_bracket$subexpression$1", symbols: [h] }, { name: "non_bracket$subexpression$1", symbols: [a] }, { name: "non_bracket$subexpression$1", symbols: [v] }, { name: "non_bracket$subexpression$1", symbols: [l] }, { name: "non_bracket$subexpression$1", symbols: [f] }, { name: "non_bracket$subexpression$1", symbols: [x] }, { name: "non_bracket$subexpression$1", symbols: [u] }, { name: "non_bracket$subexpression$1", symbols: [c] }, { name: "non_bracket$subexpression$1", symbols: [p] }, { name: "non_bracket$subexpression$1", symbols: [b] }, { name: "non_bracket$subexpression$1", symbols: [m] }, { name: "non_bracket$subexpression$1", symbols: [y] }, { name: "non_bracket", symbols: ["non_bracket$subexpression$1"], postprocess: function(e2) {
          return e2[0][0];
        } }, { name: "non_entry$ebnf$1$subexpression$1", symbols: ["escaped_entry"] }, { name: "non_entry$ebnf$1$subexpression$1", symbols: ["escaped_escape"] }, { name: "non_entry$ebnf$1$subexpression$1", symbols: ["escaped_non_esc_outside_entry"] }, { name: "non_entry$ebnf$1$subexpression$1", symbols: ["non_esc_outside_entry"] }, { name: "non_entry$ebnf$1", symbols: ["non_entry$ebnf$1$subexpression$1"] }, { name: "non_entry$ebnf$1$subexpression$2", symbols: ["escaped_entry"] }, { name: "non_entry$ebnf$1$subexpression$2", symbols: ["escaped_escape"] }, { name: "non_entry$ebnf$1$subexpression$2", symbols: ["escaped_non_esc_outside_entry"] }, { name: "non_entry$ebnf$1$subexpression$2", symbols: ["non_esc_outside_entry"] }, { name: "non_entry$ebnf$1", symbols: ["non_entry$ebnf$1", "non_entry$ebnf$1$subexpression$2"], postprocess: function(e2) {
          return e2[0].concat([e2[1]]);
        } }, { name: "non_entry", symbols: ["non_entry$ebnf$1"], postprocess: function(e2) {
          for (var t2 = [], n2 = 0; n2 < e2[0].length; n2++)
            t2.push(e2[0][n2][0]);
          return t2;
        } }, { name: "escaped_escape", symbols: [h, h], postprocess: function() {
          return "\\";
        } }, { name: "escaped_entry", symbols: [h, "entry_decl"], postprocess: function(e2) {
          return { type: "escapedEntry", data: e2[1] };
        } }, { name: "escaped_non_esc_outside_entry", symbols: [h, "non_esc_outside_entry"], postprocess: function(e2) {
          return e2;
        } }, { name: "non_esc_outside_entry$subexpression$1", symbols: [a] }, { name: "non_esc_outside_entry$subexpression$1", symbols: [l] }, { name: "non_esc_outside_entry$subexpression$1", symbols: [f] }, { name: "non_esc_outside_entry$subexpression$1", symbols: [m] }, { name: "non_esc_outside_entry$subexpression$1", symbols: [y] }, { name: "non_esc_outside_entry$subexpression$1", symbols: [$] }, { name: "non_esc_outside_entry$subexpression$1", symbols: [d] }, { name: "non_esc_outside_entry$subexpression$1", symbols: [_] }, { name: "non_esc_outside_entry$subexpression$1", symbols: [g] }, { name: "non_esc_outside_entry$subexpression$1", symbols: [v] }, { name: "non_esc_outside_entry$subexpression$1", symbols: [x] }, { name: "non_esc_outside_entry", symbols: ["non_esc_outside_entry$subexpression$1"], postprocess: function(e2) {
          return e2[0][0];
        } }], ParserStart: "main" };
      }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var r = n(14), s = n(15), o = n(16), i = n(22), a = n(23), u = function() {
          function e2(e3) {
            this.str = e3, this.len = e3.length, this.pos = 0;
          }
          return e2.prototype.getStringUntilNonEscapedChar = function(e3) {
            for (var t2 = [], n2 = this.pos; n2 < this.len + 1; n2++) {
              if (this.pos = n2, "\\" == this.str.charAt(n2) && this.str.charAt(n2 + 1).match(e3))
                n2++, this.pos = n2;
              else if (this.str.charAt(n2).match(e3))
                break;
              t2.push(this.str.charAt(n2));
            }
            return t2.join("");
          }, e2.prototype.readTokens = function() {
            for (var e3, t2 = []; e3 = this.readNextToken(); )
              t2.push(e3);
            return t2;
          }, e2.prototype.readNextToken = function() {
            if (!(this.pos >= this.str.length)) {
              var e3 = this.str.charAt(this.pos);
              return s.isSingleWhiteSpaceCharacter(e3) ? this.eatWhiteSpace() : r.isSpecialChar(e3) ? this.eatSpecialChars(e3) : o.isNum(e3) ? this.eatNumericString(e3) : this.eatIdString();
            }
          }, e2.prototype.eatIdString = function() {
            for (var e3 = [], t2 = this.pos, n2 = t2; n2 < this.len + 1; n2++) {
              this.pos = n2;
              var r2 = this.str.charAt(n2);
              if (!i.isIdChar(r2))
                break;
              e3.push(r2);
            }
            return i.newIdToken(e3.join("").trim());
          }, e2.prototype.eatNumericString = function(e3) {
            for (var t2 = [e3], n2 = this.pos + 1, r2 = n2; r2 < this.len + 1; r2++) {
              this.pos = r2;
              var s2 = this.str.charAt(r2);
              if (!o.isNum(s2))
                break;
              t2.push(s2);
            }
            var i2 = t2.join("");
            if ("0" === t2[0])
              return o.newNumber(i2);
            var a2 = Number.parseInt(i2);
            return Number.isFinite(a2) ? a2 : o.newNumber(i2);
          }, e2.prototype.eatSpecialChars = function(e3) {
            if (this.pos++, "@" === e3) {
              var t2 = this.getStringUntilNonEscapedChar("{").trim().toLowerCase();
              return a.isBibType(t2) ? r.newToken(a.bibTypes[t2], t2) : r.newToken("@bib", t2);
            }
            return e3;
          }, e2.prototype.eatWhiteSpace = function() {
            for (var e3 = []; this.pos < this.len + 1; ) {
              var t2 = this.str.charAt(this.pos);
              if (!s.isSingleWhiteSpaceCharacter(t2))
                break;
              e3.push(t2), this.pos++;
            }
            return s.newWhitespace(e3.join(""));
          }, e2;
        }();
        t.default = u;
      }, function(e, t, n) {
        "use strict";
        function r(e2) {
          return { type: "id", string: e2 };
        }
        function s(e2) {
          return "id" === e2.type && "string" == typeof e2.string;
        }
        function o(e2) {
          return !(i.isSpecialChar(e2) || u.isNum(e2) || a.isSingleWhiteSpaceCharacter(e2));
        }
        Object.defineProperty(t, "__esModule", { value: true });
        var i = n(14), a = n(15), u = n(16);
        t.newIdToken = r, t.isIdToken = s, t.isIdChar = o;
      }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.bibTypes = { string: "@string", preamble: "@preamble", comment: "@comment", bib: "@bib" }, t.isBibType = function(e2) {
          return t.bibTypes.hasOwnProperty(e2);
        };
      }]);
    });
  }
});
export default require_bibtex();
//# sourceMappingURL=bibtex.js.map
